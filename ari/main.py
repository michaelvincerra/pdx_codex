
import os
import re

# quantify_words('llamas llamas')

BOOKS = '/Users/michaelevan/temp/pdx_code/PythonFullStack/1_Python/3_Applied_Python/labs/ari/books/'
BOOKS2 = '/Users/michaelevan/temp/pdx_code/PythonFullStack/1_Python/3_Applied_Python/labs/ari/books/licenses/'

def get_data(path):
    """ 
    Retrieves file contents as a string.
    """
    with open(path, 'r') as file:           # Context manager returns a file object
        text = file.read()                  # Read the path, passed as an argument in get_data
        return text                         # Return the path object

def show_options():
    """
    Show booktitles by combining BOOKs file path with enumerated .txt files; and allow user to select .txt file.
    """
    paths = os.listdir(BOOKS)    # os method to show the file path BOOKS, above
    books = {index: book for index, book in enumerate(paths, start=1)}    # index=loop var creates dictionary keys
    update_data = {len(books) + 1: 'exit'}    # var creates dict at length of len(books) +1
    books.update(update_data)   # update books using above function
    print(books)    # print books/ or return books

    choice = int(input('To compute its automated readability index, pick from one of the files:>> '))   # user input

    booktitle = books[choice]               # booktitle returns user's choice of books, generated by enumerated dict
    path_combo = BOOKS + booktitle          # path_combo includes BOOKS filepath + booktitle, user's choice above.
    return booktitle, path_combo            # TODO: Create Try Except block for: folder_book = path_combo + choice


def display_output(ari_score: int, fname: str) -> None:   # Passes the param of ari_score as int, and fname as str

    ari_scale = {
        1: {'ages': '5-6', 'grade_level': 'Kindergarten'},
        2: {'ages': '6-7', 'grade_level': '1st Grade'},
        3: {'ages': '7-8', 'grade_level': '2nd Grade'},
        4: {'ages': '8-9', 'grade_level': '3rd Grade'},
        5: {'ages': '9-10', 'grade_level': '4th Grade'},
        6: {'ages': '10-11', 'grade_level': '5th Grade'},
        7: {'ages': '11-12', 'grade_level': '6th Grade'},
        8: {'ages': '12-13', 'grade_level': '7th Grade'},
        9: {'ages': '13-14', 'grade_level': '8th Grade'},
        10: {'ages': '14-15', 'grade_level': '9th Grade'},
        11: {'ages': '15-16', 'grade_level': '10th Grade'},
        12: {'ages': '16-17', 'grade_level': '11th Grade'},
        13: {'ages': '17-18', 'grade_level': '12th Grade'},
        14: {'ages': '18-22', 'grade_level': 'College'}}

    judo = ari_scale.get(ari_score, ari_scale[14])  # from ari_scale.get(get ari_score returns the key(int)

    ages, level = judo['ages'], judo['grade_level']

    # triple single quotes allows WYSWIG format for string.
    message = f'''                                                                           
    The ARI for the file '{fname}' is '{ari_score}'.
    This corresponds to a '{level}' level of difficulty
    that is suitable for an average person '{ages}' years old.
    '''
    print(message)


def processor():
    """ 
    Reads and interprets contents of the txt file opened via show_options.
    Get qty of sentences, REGEX
    Get qty of words REGEX
    Get qty of characters
    Clean all text; omit periods, commas, and brackets
    """
    bookname, fullpath = show_options()  # How to call the 'return text' from function above.

    fulltext = get_data(fullpath)

    parsed = re.sub(r'[\:\-\(\)\[\]\–]', '', fulltext)  # Regex to parse

    pattern = re.compile(r"""                           # Multiline uses three double quotations at start and end.    
                         [A-Z]                          # One uppercase letter
                         [a-z]+                         # One lowercase letter; meta classes: one class followed by other
                         [\s\w\,\:\-\(\)\[\]\–\@]+      # Followed by a space, a word, and all the other punctuation. 
                         \.                             # Followed by a period.
                         """,                           # Tells Regex it's a multiline
                         re.X)                          # Tells Python it's a multiline; alternate: re.Verbose

    splittah = pattern.findall(fulltext)                # Return regex pattern and finds all instances of it.
    sent_qty = len(splittah)                            # Return the length of items found using regex criteria
    # print(sent_qty)

    char_qty = len(parsed)                              # Return length of characters from parsed, met regex criteria
    # print(char_qty)

    word_qty = len(fulltext.split())                    # Return length of words from fulltext after split operation
    # print(word_qty)(word_qty)

    ari_score = round((4.71 * (char_qty / word_qty)) + (.5 * (word_qty / sent_qty)) - 21.43) # ARI Formula, w above vars

    display_output(ari_score=ari_score, fname=bookname) # kwargs explicitly call ari_score and fname, def display_output
                                                        # which are return param values passed from show_options
                                                        # to processor(), now called bookname, fullpath.


processor()
